

https://github.com/Snailclimb/JavaGuide/blob/main/docs/system-design/framework/spring/ioc-and-aop.md
# AOP的概念
Logging类就是一个切面(aspect)
selectGetName是切点(pointcut)
beforeAdvice是通知(adivce)
在调用com.gfg.Student.getName()方法的时候就是连接点(joint point)
织入（Weaving）：在运行时，Spring 会把Logging切面应用到test对象上。
```
@Aspect
public class Logging {
   @PointCut("execution(* com.gfg.Student.getName(..))")
   private void selectGetName(){}
  
   @Before("selectGetName()")
   public void beforeAdvice(){
      ...
   }  
}
```

AbstractAutoProxyCreator#wrapIfNecessary
```java
// 获取所有的拦截器
// 这里还是会根据Pointcut匹配target的
Object[] specificInterceptors = this.getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, (TargetSource)null);

```
- LogArgsAdvice
- LogResultAdvice
这里拦截的就是上面配置的的两个Advice（通知）

AbstractAutoProxyCreator#createProxy

```java
BeanPostProcessor
InstantiationAwareBeanPostProcessor
SmartInstantiationAwareBeanPostProcessor
AbstractAutoProxyCreator
AbstractAdvisorAutoProxyCreator
DefaultAdvisorAutoProxyCreator
```


# 调用关系
属于ioc范畴
- AbstractBeanFactory
- DefaultSingletonBeanRegistry
  - getSingleton
  - getObject
- AbstractAutowireCapableBeanFactory
	- createBean
	- resolveBeforeInstantiation
	- applyBeanPostProcessorsBeforeInstantiation


属于aop范畴
- AbstractAutoProxyCreator
	- postProcessBeforeInstantiation
	- isInfrastructureClass

把几个关于AOP的入口找出来
- createBean -> resolveBeforeInstantiation -> applyBeanPostProcessorsBeforeInstantiation
  如果这里返回为null就不走动态代理的逻辑
- createBean -> doCreateBean -> initializeBean -> invokeAwareMethods -> DefaultAdvisorAutoProxyCreator#setBeanName
  initializeBean -> invokeAwareMethods 这里是实现BeanNameAware的setBeanName功能
  initializeBean -> applyBeanPostProcessorsAfterInitialization -> AbstractAutoProxyCreator#postProcessAfterInitialization 这里是真正实现AOP的入口

这个是Spring AOP的流程, 
AbstractAutowireCapableBeanFactory#createBean -> doCreateBean -> initializeBean -> applyBeanPostProcessorsAfterInitialization -> AbstractAutoProxyCreator#wrapIfNecessary -> createProxy ->  ProxyFactory#getProxy -> JdkDynamicAopProxy#getProxy 

AbstractAutoProxyCreator是beanpostprocessor,实现了接口的postProcessAfterInitialization方法
DefaultAopProxyFactory就负责createAopProxy，该方法会调用JdkDynamicAopProxy的getProxy方法
```java
createBean(){
	...
	beanInstance = this.resolveBeforeInstantiation(beanName, mbdToUse);
	...
	beanInstance = this.doCreateBean(beanName, mbdToUse, args);
}

doCreateBean(){
	...
	exposedObject = this.initializeBean(beanName, exposedObject, mbd);
	...
}

initializeBean(){
	...
	this.invokeAwareMethods(beanName, bean);
	...
}
```

```
AbstractBeanFactory#getBean -> dogetBean -> DefaultSingletonBeanRegistry#getSingleton -> getObject -> ... -> AbstractAutowireCapableBeanFactory#createBean -> resolveBeforeInstantiation -> applyBeanPostProcessorsBeforeInstantiation -> AbstractAutoProxyCreator#postProcessBeforeInstantiation -> isInfrastructureClass
```

## 源码

### 责任链
- JdkDynamicAopProxy
- ReflectiveMethodInvocation
- MethodBeforeAdviceInterceptor 适配 AspectJMethodBeforeAdvice
- AfterReturningAdviceInterceptor 适配 AspectJAfterReturningAdvice
- ThrowsAdviceInterceptor 适配 AspectJAfterThrowingAdvice
  适配器模式，before adivce没有invoke方法， 它的 invoke 方法掉 adivce 的before方法

around的情况
- before, 先执行 before advice
- 执行target逻辑
- after, 执行after advice

AspectJMethodBeforeAdvice
```java
public void before(Method method, Object[] args, @Nullable Object target) throws Throwable {
	invokeAdviceMethod(getJoinPointMatch(), null, null);
}
```

AspectJAfterAdvice
```java
public Object invoke(MethodInvocation mi) throws Throwable {
		try {
			//这个就是ReflectiveMethodInvocation
			//因为是after 所以先执行下一个拦截器
			return mi.proceed();
		}
		finally {
			// 这里是after的逻辑
			invokeAdviceMethod(getJoinPointMatch(), null, null);
		}
	}
```

AspectJAroundAdvice
```
public Object invoke(MethodInvocation mi) throws Throwable {
	if (!(mi instanceof ProxyMethodInvocation pmi)) {
		throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi);
	}
	ProceedingJoinPoint pjp = lazyGetProceedingJoinPoint(pmi);
	JoinPointMatch jpm = getJoinPointMatch(pmi);
	return invokeAdviceMethod(pjp, jpm, null, null);
}
```

ProceedingJoinPoint
pjp.proceed其实调的就是mi.proceed, 也就是ReflectiveMethodInvocation（责任链实现）
```java
# MethodInvocationProceedingJoinPoint
public Object proceed() throws Throwable {  
  return this.methodInvocation.invocableClone().proceed();  
}
```


## Pointcut 匹配
AbstractAdvisorAutoProxyCreator
- findAdvisorsThatCanApply
  用来匹配advisors是否使用target
wrapIfNecessary -> getAdvicesAndAdvisorsForBean -> findEligibleAdvisors -> findAdvisorsThatCanApply -> findAdvisorsThatCanApply -> AopUtils#canApply -> canApply
最后会调用IntroductionAdvisor接口的getClassFilter进行匹配

有些代理无法在静态匹配完整代理， 还需要动态匹配一次具体逻辑在DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice
这个例子里的name需要动态获取，无法静态取得
```java
@Before("execution(* com.example.*.*(..))" && args(name))
public void log(String name){
	...
}
```

### 匹配代码
```java
protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {
...
// getAdvicesAndAdvisorsForBean会调用下面的findAdvisorsThatCanApply， 根据Pointcut决定是否加入列表
Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);
}
```

```java
	/**
	 * Can the given advisor apply at all on the given class?
	 * <p>This is an important test as it can be used to optimize out an advisor for a class.
	 * This version also takes into account introductions (for IntroductionAwareMethodMatchers).
	 * @param advisor the advisor to check
	 * @param targetClass class we're testing
	 * @param hasIntroductions whether the advisor chain for this bean includes
	 * any introductions
	 * @return whether the pointcut can apply on any method
	 */
	public static boolean canApply(Advisor advisor, Class<?> targetClass, boolean hasIntroductions) {
		if (advisor instanceof IntroductionAdvisor ia) {
			return ia.getClassFilter().matches(targetClass);
		}
		else if (advisor instanceof PointcutAdvisor pca) {
			return canApply(pca.getPointcut(), targetClass, hasIntroductions);
		}
		else {
			// It doesn't have a pointcut so we assume it applies.
			return true;
		}
	}
```
# QA
AbstractAutoProxyCreator#postProcessBeforeInstantiation 和 AbstractAutoProxyCreator#postProcessAfterInitialization
这两个方法都和AOP有关，具体区别又是什么？

| 方法                             | 执行时机       | 核心作用                            | 典型场景                         |
|--------------------------------|------------|---------------------------------|------------------------------|
| postProcessBeforeInstantiation | 实例化前（构造前）  | 短路 Bean 创建流程，提前创建代理（如处理循环依赖）。   | 循环依赖、特殊 Bean 强制代理。           |
| postProcessAfterInitialization | 初始化后（完全创建） | 正常创建代理，基于方法匹配和 Advisor 增强 Bean。 | 基于注解的 AOP（如 @Transactional）。 |





