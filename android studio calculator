好的，以下是一个基于Jetpack Compose的简单计算器应用的详细代码。这个计算器支持基本的加减乘除运算，并有一个简单的UI布局。

**主要特点：**

*   **Jetpack Compose UI:** 纯声明式UI，易于理解和修改。
*   **状态管理:** 使用`remember { mutableStateOf(...) }`管理输入表达式和结果。
*   **事件处理:** 按钮点击事件更新状态并执行计算。
*   **简单表达式解析:** 使用Kotlin的`eval`（通过JavaScriptEngine）来简化计算逻辑。对于更复杂的计算器，你可能需要自己实现一个表达式解析器。
*   **基本布局:** 使用`Column`, `Row`, `Button`, `Text`等Compose组件。

---

**1. `MainActivity.kt` (或你应用的主Activity)**

这是应用的入口点，包含主要的Composable函数。

```kotlin
package com.example.calculatorapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.* // 或 androidx.compose.material.
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.calculatorapp.ui.theme.CalculatorAppTheme
import javax.script.ScriptEngineManager

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CalculatorAppTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    CalculatorScreen()
                }
            }
        }
    }
}

@Composable
fun CalculatorScreen() {
    // 存储当前显示的表达式
    var expression by remember { mutableStateOf("") }
    // 存储计算结果
    var result by remember { mutableStateOf("0") }

    // JavaScript引擎用于计算表达式
    val scriptEngine = remember { ScriptEngineManager().getEngineByName("rhino") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.DarkGray) // 整体背景色
            .padding(16.dp),
        horizontalAlignment = Alignment.End // 让内容靠右对齐
    ) {
        Spacer(modifier = Modifier.weight(1f)) // 顶部的空白，将内容推到底部

        // 显示表达式
        Text(
            text = expression,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            fontSize = 30.sp,
            color = Color.White,
            textAlign = TextAlign.End,
            maxLines = 2 // 允许两行显示表达式
        )

        // 显示结果
        Text(
            text = result,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            fontSize = 48.sp,
            fontWeight = FontWeight.Bold,
            color = Color.White,
            textAlign = TextAlign.End,
            maxLines = 1
        )

        // 按钮行
        CalculatorButtonRow(
            buttons = listOf("AC", "+/-", "%", "/"),
            onButtonClick = { buttonText ->
                when (buttonText) {
                    "AC" -> {
                        expression = ""
                        result = "0"
                    }
                    "+/-" -> {
                        // 简单处理正负号，如果结果不是0，就在前面加个负号
                        // 实际复杂计算器可能需要更精细的逻辑
                        if (result != "0" && result.isNotEmpty()) {
                            result = if (result.startsWith("-")) {
                                result.substring(1)
                            } else {
                                "-$result"
                            }
                        }
                    }
                    "%" -> {
                        // 简单处理百分比，例如 50% 变成 0.5
                        if (expression.isNotEmpty() && expression.last().isDigit()) {
                            try {
                                val value = scriptEngine.eval(expression).toString().toDouble()
                                expression = (value / 100).toString()
                                result = expression
                            } catch (e: Exception) {
                                result = "Error"
                            }
                        } else if (result.isNotEmpty() && result != "0") {
                            try {
                                val value = result.toDouble()
                                result = (value / 100).toString()
                                expression = result
                            } catch (e: Exception) {
                                result = "Error"
                            }
                        }
                    }
                    else -> expression += buttonText // 其他运算符直接添加到表达式
                }
            },
            buttonColors = listOf(
                ButtonDefaults.buttonColors(containerColor = Color(0xFFAAAAAA)), // AC, +/-, %
                ButtonDefaults.buttonColors(containerColor = Color(0xFFFFA500))  // 除号
            )
        )
        CalculatorButtonRow(
            buttons = listOf("7", "8", "9", "*"),
            onButtonClick = { expression += it },
            buttonColors = listOf(
                ButtonDefaults.buttonColors(containerColor = Color(0xFF333333)), // 数字
                ButtonDefaults.buttonColors(containerColor = Color(0xFFFFA500))  // 乘号
            )
        )
        CalculatorButtonRow(
            buttons = listOf("4", "5", "6", "-"),
            onButtonClick = { expression += it },
            buttonColors = listOf(
                ButtonDefaults.buttonColors(containerColor = Color(0xFF333333)),
                ButtonDefaults.buttonColors(containerColor = Color(0xFFFFA500))
            )
        )
        CalculatorButtonRow(
            buttons = listOf("1", "2", "3", "+"),
            onButtonClick = { expression += it },
            buttonColors = listOf(
                ButtonDefaults.buttonColors(containerColor = Color(0xFF333333)),
                ButtonDefaults.buttonColors(containerColor = Color(0xFFFFA500))
            )
        )
        // 最后一排按钮（0, ., =）
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceAround
        ) {
            // 0 按钮占用两格宽度
            CalculatorButton(
                text = "0",
                modifier = Modifier
                    .weight(2f) // 占据两格
                    .aspectRatio(2f), // 保持宽度是高度的两倍
                onClick = { expression += "0" },
                containerColor = Color(0xFF333333),
                contentColor = Color.White
            )
            Spacer(modifier = Modifier.width(8.dp)) // 0和.之间的间距
            CalculatorButton(
                text = ".",
                modifier = Modifier
                    .weight(1f)
                    .aspectRatio(1f),
                onClick = {
                    if (expression.isNotEmpty() && expression.last().isDigit() && !expression.contains(".")) {
                        expression += "."
                    } else if (expression.isEmpty()) {
                        expression = "0."
                    }
                },
                containerColor = Color(0xFF333333),
                contentColor = Color.White
            )
            Spacer(modifier = Modifier.width(8.dp))
            CalculatorButton(
                text = "=",
                modifier = Modifier
                    .weight(1f)
                    .aspectRatio(1f),
                onClick = {
                    try {
                        // 使用JavaScript引擎评估表达式
                        val res = scriptEngine.eval(expression)
                        result = res.toString()
                        expression = res.toString() // 将结果设置为新的表达式，方便继续运算
                    } catch (e: Exception) {
                        result = "Error"
                        expression = "" // 清空表达式
                    }
                },
                containerColor = Color(0xFFFFA500),
                contentColor = Color.White
            )
        }
    }
}

@Composable
fun CalculatorButtonRow(
    buttons: List<String>,
    onButtonClick: (String) -> Unit,
    buttonColors: List<ButtonColors> // 前三个颜色，最后一个颜色
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceAround
    ) {
        buttons.forEachIndexed { index, text ->
            val color = if (index < buttons.size - 1) buttonColors[0] else buttonColors[1] // 根据索引选择颜色
            CalculatorButton(
                text = text,
                modifier = Modifier
                    .weight(1f)
                    .aspectRatio(1f), // 确保按钮是正方形
                onClick = { onButtonClick(text) },
                containerColor = color.containerColor,
                contentColor = color.contentColor
            )
            if (index < buttons.size - 1) {
                Spacer(modifier = Modifier.width(8.dp)) // 按钮之间的间距
            }
        }
    }
}

@Composable
fun CalculatorButton(
    text: String,
    modifier: Modifier = Modifier,
    onClick: () -> Unit,
    containerColor: Color,
    contentColor: Color
) {
    Button(
        onClick = onClick,
        modifier = modifier
            .background(Color.Transparent), // 确保按钮背景是圆形的
        shape = RoundedCornerShape(100), // 圆形按钮
        colors = ButtonDefaults.buttonColors(
            containerColor = containerColor,
            contentColor = contentColor
        ),
        contentPadding = PaddingValues(0.dp) // 移除内边距，让Text填充
    ) {
        Text(
            text = text,
            fontSize = 32.sp,
            fontWeight = FontWeight.Normal,
            textAlign = TextAlign.Center,
            modifier = Modifier.fillMaxSize().wrapContentSize(Alignment.Center) // 确保文本居中
        )
    }
}


@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    CalculatorAppTheme {
        CalculatorScreen()
    }
}
```

---

**2. `ui.theme/Theme.kt` (默认的Compose主题文件)**

确保你的主题文件是正确的，或者根据你的Material Design 3配置调整。

```kotlin
package com.example.calculatorapp.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80,
    background = Color.DarkGray, // 设置暗色模式的背景
    surface = Color.DarkGray
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40,
    background = Color.LightGray, // 设置亮色模式的背景
    surface = Color.LightGray

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun CalculatorAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true, // 可以关闭动态颜色
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
```

---

**3. `ui.theme/Color.kt` (默认的Compose颜色文件)**

```kotlin
package com.example.calculatorapp.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
```

---

**4. `build.gradle.kts (Module: app)`**

确保你的`build.gradle.kts`（或`build.gradle`）文件包含正确的依赖项。

```kotlin
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.example.calculatorapp"
    compileSdk = 34 // 或更高版本

    defaultConfig {
        applicationId = "com.example.calculatorapp"
        minSdk = 24 // 兼容性考虑，如果你不需要Android 12+的动态颜色，可以设置为21
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMini
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1" // 根据你的Compose版本调整
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {

    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.2")
    implementation("androidx.activity:activity-compose:1.8.1")
    implementation(platform("androidx.compose:compose-bom:2023.08.00")) // 使用最新的Compose BOM
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3") // 或 material
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:2023.08.00"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")

    // 添加对javax.script的支持，用于表达式求值
    // Android Studio可能提示这个已废弃，但在Android上使用JavaScriptEngine是常见做法
    // 如果你遇到问题，可以考虑使用第三方库（如 Koin 或 Expresseval）或自己实现解析器
    implementation("org.mozilla:rhino:1.7.14") // 实际使用的是Android内置的Rhino，但为了IDE识别，可以添加这个依赖
}
```

---

**解释和注意事项：**

1.  **`javax.script.ScriptEngineManager`:** 这是Java的标准库，用于执行脚本语言（如JavaScript）。在Android上，它默认包含了一个名为"rhino"的JavaScript引擎。这使得我们无需手动解析和计算复杂的数学表达式。
    *   **重要提示:** 虽然方便，但`javax.script`在某些Android版本上可能存在兼容性问题或性能开销。对于生产级应用，特别是需要高性能或更严格错误处理的计算器，通常会自己实现一个表达式解析器（例如，使用堆栈和逆波兰表示法）。
    *   为了确保 `ScriptEngineManager` 正常工作，我在 `build.gradle.kts` 中添加了 `org.mozilla:rhino:1.7.14` 依赖。虽然Android内置的Rhino通常足够，但这个依赖可以帮助IDE更好地识别和提供补全。

2.  **状态管理 (`remember { mutableStateOf(...) }`)**:
    *   `expression`: 存储用户输入的当前数字和运算符。
    *   `result`: 存储计算的最终结果。
    *   当这些状态变量改变时，Compose会自动重新绘制受影响的UI部分。

3.  **UI 布局 (`Column`, `Row`, `Button`, `Text`)**:
    *   使用 `Column` 垂直排列内容。
    *   使用 `Row` 水平排列每行的按钮。
    *   `Modifier.weight(1f)` 和 `Modifier.aspectRatio(1f)` 用于让按钮等宽等高，并均匀分布。
    *   `Modifier.fillMaxWidth()` 和 `Modifier.fillMaxSize()` 确保组件填充可用空间。

4.  **按钮逻辑 (`onButtonClick`)**:
    *   **数字和运算符:** 大部分按钮只是将它们的文本追加到 `expression` 字符串中。
    *   **"AC" (All Clear):** 清空 `expression` 和 `result`。
    *   **"=" (Equals):** 调用 `scriptEngine.eval(expression)` 进行实际计算，并将结果更新到 `result`。同时，将结果赋值给 `expression`，以便用户可以在结果上继续操作（例如，5 + 5 = 10，然后按 + 2，变成 10 + 2）。
    *   **"+/-" (正负号):** 简单地在 `result` 前面添加或移除负号。这个逻辑可能需要更健壮，以处理当前输入的表达式。
    *   **"%" (百分比):** 简单地将当前表达式或结果除以100。

5.  **错误处理:** `try-catch` 块用于捕获 `scriptEngine.eval()` 可能抛出的错误（例如，无效的数学表达式），并将 `result` 设置为 "Error"。

6.  **UI 样式:**
    *   使用了`MaterialTheme.colorScheme.background`作为`Surface`的背景，并在`CalculatorScreen`中覆盖为`Color.DarkGray`，以获得iOS计算器般的深色外观。
    *   自定义`ButtonColors`来给不同类型的按钮设置不同的颜色（例如，操作符为橙色，数字为深灰色，AC等为灰色）。
    *   `RoundedCornerShape(100)` 用于创建圆形按钮。

**如何运行：**

1.  在Android Studio中创建一个新的`Empty Activity`项目，选择`Compose`。
2.  将上述代码复制粘贴到相应的Kotlin文件和`build.gradle.kts`中。
3.  同步Gradle项目。
4.  运行到模拟器或真实设备上。

这个计算器是一个很好的起点。你可以根据需要进一步增强它，例如：

*   **更强大的表达式解析器:** 如果你不喜欢使用`ScriptEngine`，或者需要更复杂的数学函数（三角函数、对数等），可以实现自己的解析器。
*   **历史记录:** 存储之前的计算。
*   **科学计算功能:** 添加更多按钮和功能。
*   **更好的错误反馈:** 而不仅仅是 "Error"。
*   **输入验证:** 防止用户输入无效的表达式（例如，连续两个运算符）。
*   **动画效果:** 让按钮点击更具交互性。
